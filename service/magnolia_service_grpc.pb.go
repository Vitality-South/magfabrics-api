// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: magnolia_service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MagnoliaFabricsServiceClient is the client API for MagnoliaFabricsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MagnoliaFabricsServiceClient interface {
	GetAllFabrics(ctx context.Context, in *GetAllFabricsRequest, opts ...grpc.CallOption) (*GetAllFabricsResponse, error)
	GetAllFabricsWithoutInventory(ctx context.Context, in *GetAllFabricsWithoutInventoryRequest, opts ...grpc.CallOption) (*GetAllFabricsWithoutInventoryResponse, error)
	GetAllInventory(ctx context.Context, in *GetAllInventoryRequest, opts ...grpc.CallOption) (*GetAllInventoryResponse, error)
	GetFabricByID(ctx context.Context, in *GetFabricByIDRequest, opts ...grpc.CallOption) (*GetFabricByIDResponse, error)
	GetFabricByName(ctx context.Context, in *GetFabricByNameRequest, opts ...grpc.CallOption) (*GetFabricByNameResponse, error)
	GetAllFabricTaxonomy(ctx context.Context, in *GetAllFabricTaxonomyRequest, opts ...grpc.CallOption) (*GetAllFabricTaxonomyResponse, error)
	GetCleaningCodes(ctx context.Context, in *GetCleaningCodesRequest, opts ...grpc.CallOption) (*GetCleaningCodesResponse, error)
}

type magnoliaFabricsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMagnoliaFabricsServiceClient(cc grpc.ClientConnInterface) MagnoliaFabricsServiceClient {
	return &magnoliaFabricsServiceClient{cc}
}

func (c *magnoliaFabricsServiceClient) GetAllFabrics(ctx context.Context, in *GetAllFabricsRequest, opts ...grpc.CallOption) (*GetAllFabricsResponse, error) {
	out := new(GetAllFabricsResponse)
	err := c.cc.Invoke(ctx, "/magnoliafabrics.MagnoliaFabricsService/GetAllFabrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnoliaFabricsServiceClient) GetAllFabricsWithoutInventory(ctx context.Context, in *GetAllFabricsWithoutInventoryRequest, opts ...grpc.CallOption) (*GetAllFabricsWithoutInventoryResponse, error) {
	out := new(GetAllFabricsWithoutInventoryResponse)
	err := c.cc.Invoke(ctx, "/magnoliafabrics.MagnoliaFabricsService/GetAllFabricsWithoutInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnoliaFabricsServiceClient) GetAllInventory(ctx context.Context, in *GetAllInventoryRequest, opts ...grpc.CallOption) (*GetAllInventoryResponse, error) {
	out := new(GetAllInventoryResponse)
	err := c.cc.Invoke(ctx, "/magnoliafabrics.MagnoliaFabricsService/GetAllInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnoliaFabricsServiceClient) GetFabricByID(ctx context.Context, in *GetFabricByIDRequest, opts ...grpc.CallOption) (*GetFabricByIDResponse, error) {
	out := new(GetFabricByIDResponse)
	err := c.cc.Invoke(ctx, "/magnoliafabrics.MagnoliaFabricsService/GetFabricByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnoliaFabricsServiceClient) GetFabricByName(ctx context.Context, in *GetFabricByNameRequest, opts ...grpc.CallOption) (*GetFabricByNameResponse, error) {
	out := new(GetFabricByNameResponse)
	err := c.cc.Invoke(ctx, "/magnoliafabrics.MagnoliaFabricsService/GetFabricByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnoliaFabricsServiceClient) GetAllFabricTaxonomy(ctx context.Context, in *GetAllFabricTaxonomyRequest, opts ...grpc.CallOption) (*GetAllFabricTaxonomyResponse, error) {
	out := new(GetAllFabricTaxonomyResponse)
	err := c.cc.Invoke(ctx, "/magnoliafabrics.MagnoliaFabricsService/GetAllFabricTaxonomy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnoliaFabricsServiceClient) GetCleaningCodes(ctx context.Context, in *GetCleaningCodesRequest, opts ...grpc.CallOption) (*GetCleaningCodesResponse, error) {
	out := new(GetCleaningCodesResponse)
	err := c.cc.Invoke(ctx, "/magnoliafabrics.MagnoliaFabricsService/GetCleaningCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MagnoliaFabricsServiceServer is the server API for MagnoliaFabricsService service.
// All implementations must embed UnimplementedMagnoliaFabricsServiceServer
// for forward compatibility
type MagnoliaFabricsServiceServer interface {
	GetAllFabrics(context.Context, *GetAllFabricsRequest) (*GetAllFabricsResponse, error)
	GetAllFabricsWithoutInventory(context.Context, *GetAllFabricsWithoutInventoryRequest) (*GetAllFabricsWithoutInventoryResponse, error)
	GetAllInventory(context.Context, *GetAllInventoryRequest) (*GetAllInventoryResponse, error)
	GetFabricByID(context.Context, *GetFabricByIDRequest) (*GetFabricByIDResponse, error)
	GetFabricByName(context.Context, *GetFabricByNameRequest) (*GetFabricByNameResponse, error)
	GetAllFabricTaxonomy(context.Context, *GetAllFabricTaxonomyRequest) (*GetAllFabricTaxonomyResponse, error)
	GetCleaningCodes(context.Context, *GetCleaningCodesRequest) (*GetCleaningCodesResponse, error)
	mustEmbedUnimplementedMagnoliaFabricsServiceServer()
}

// UnimplementedMagnoliaFabricsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMagnoliaFabricsServiceServer struct {
}

func (UnimplementedMagnoliaFabricsServiceServer) GetAllFabrics(context.Context, *GetAllFabricsRequest) (*GetAllFabricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFabrics not implemented")
}
func (UnimplementedMagnoliaFabricsServiceServer) GetAllFabricsWithoutInventory(context.Context, *GetAllFabricsWithoutInventoryRequest) (*GetAllFabricsWithoutInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFabricsWithoutInventory not implemented")
}
func (UnimplementedMagnoliaFabricsServiceServer) GetAllInventory(context.Context, *GetAllInventoryRequest) (*GetAllInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInventory not implemented")
}
func (UnimplementedMagnoliaFabricsServiceServer) GetFabricByID(context.Context, *GetFabricByIDRequest) (*GetFabricByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFabricByID not implemented")
}
func (UnimplementedMagnoliaFabricsServiceServer) GetFabricByName(context.Context, *GetFabricByNameRequest) (*GetFabricByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFabricByName not implemented")
}
func (UnimplementedMagnoliaFabricsServiceServer) GetAllFabricTaxonomy(context.Context, *GetAllFabricTaxonomyRequest) (*GetAllFabricTaxonomyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllFabricTaxonomy not implemented")
}
func (UnimplementedMagnoliaFabricsServiceServer) GetCleaningCodes(context.Context, *GetCleaningCodesRequest) (*GetCleaningCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCleaningCodes not implemented")
}
func (UnimplementedMagnoliaFabricsServiceServer) mustEmbedUnimplementedMagnoliaFabricsServiceServer() {
}

// UnsafeMagnoliaFabricsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MagnoliaFabricsServiceServer will
// result in compilation errors.
type UnsafeMagnoliaFabricsServiceServer interface {
	mustEmbedUnimplementedMagnoliaFabricsServiceServer()
}

func RegisterMagnoliaFabricsServiceServer(s grpc.ServiceRegistrar, srv MagnoliaFabricsServiceServer) {
	s.RegisterService(&MagnoliaFabricsService_ServiceDesc, srv)
}

func _MagnoliaFabricsService_GetAllFabrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFabricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnoliaFabricsServiceServer).GetAllFabrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magnoliafabrics.MagnoliaFabricsService/GetAllFabrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnoliaFabricsServiceServer).GetAllFabrics(ctx, req.(*GetAllFabricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagnoliaFabricsService_GetAllFabricsWithoutInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFabricsWithoutInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnoliaFabricsServiceServer).GetAllFabricsWithoutInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magnoliafabrics.MagnoliaFabricsService/GetAllFabricsWithoutInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnoliaFabricsServiceServer).GetAllFabricsWithoutInventory(ctx, req.(*GetAllFabricsWithoutInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagnoliaFabricsService_GetAllInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnoliaFabricsServiceServer).GetAllInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magnoliafabrics.MagnoliaFabricsService/GetAllInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnoliaFabricsServiceServer).GetAllInventory(ctx, req.(*GetAllInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagnoliaFabricsService_GetFabricByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFabricByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnoliaFabricsServiceServer).GetFabricByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magnoliafabrics.MagnoliaFabricsService/GetFabricByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnoliaFabricsServiceServer).GetFabricByID(ctx, req.(*GetFabricByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagnoliaFabricsService_GetFabricByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFabricByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnoliaFabricsServiceServer).GetFabricByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magnoliafabrics.MagnoliaFabricsService/GetFabricByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnoliaFabricsServiceServer).GetFabricByName(ctx, req.(*GetFabricByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagnoliaFabricsService_GetAllFabricTaxonomy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllFabricTaxonomyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnoliaFabricsServiceServer).GetAllFabricTaxonomy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magnoliafabrics.MagnoliaFabricsService/GetAllFabricTaxonomy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnoliaFabricsServiceServer).GetAllFabricTaxonomy(ctx, req.(*GetAllFabricTaxonomyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MagnoliaFabricsService_GetCleaningCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCleaningCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnoliaFabricsServiceServer).GetCleaningCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magnoliafabrics.MagnoliaFabricsService/GetCleaningCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnoliaFabricsServiceServer).GetCleaningCodes(ctx, req.(*GetCleaningCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MagnoliaFabricsService_ServiceDesc is the grpc.ServiceDesc for MagnoliaFabricsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MagnoliaFabricsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "magnoliafabrics.MagnoliaFabricsService",
	HandlerType: (*MagnoliaFabricsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllFabrics",
			Handler:    _MagnoliaFabricsService_GetAllFabrics_Handler,
		},
		{
			MethodName: "GetAllFabricsWithoutInventory",
			Handler:    _MagnoliaFabricsService_GetAllFabricsWithoutInventory_Handler,
		},
		{
			MethodName: "GetAllInventory",
			Handler:    _MagnoliaFabricsService_GetAllInventory_Handler,
		},
		{
			MethodName: "GetFabricByID",
			Handler:    _MagnoliaFabricsService_GetFabricByID_Handler,
		},
		{
			MethodName: "GetFabricByName",
			Handler:    _MagnoliaFabricsService_GetFabricByName_Handler,
		},
		{
			MethodName: "GetAllFabricTaxonomy",
			Handler:    _MagnoliaFabricsService_GetAllFabricTaxonomy_Handler,
		},
		{
			MethodName: "GetCleaningCodes",
			Handler:    _MagnoliaFabricsService_GetCleaningCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "magnolia_service.proto",
}
