// Copyright (c) 2022 Vitality South, LLC <chris@vitalitysouth.com>
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.0
// source: api_taxonomy.proto

package taxonomy

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Taxonomy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @gotags: dynamo:"TaxonomyBrands"
	Brands []string `protobuf:"bytes,1,rep,name=Brands,proto3" json:"Brands,omitempty" dynamo:"TaxonomyBrands"`
	// @gotags: dynamo:"TaxonomyUses"
	Uses []string `protobuf:"bytes,2,rep,name=Uses,proto3" json:"Uses,omitempty" dynamo:"TaxonomyUses"`
	// @gotags: dynamo:"TaxonomyColors"
	Colors []string `protobuf:"bytes,3,rep,name=Colors,proto3" json:"Colors,omitempty" dynamo:"TaxonomyColors"`
	// @gotags: dynamo:"TaxonomyDesigns"
	Designs []string `protobuf:"bytes,4,rep,name=Designs,proto3" json:"Designs,omitempty" dynamo:"TaxonomyDesigns"`
	// @gotags: dynamo:"TaxonomyCategories"
	Categories    []string `protobuf:"bytes,5,rep,name=Categories,proto3" json:"Categories,omitempty" dynamo:"TaxonomyCategories"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Taxonomy) Reset() {
	*x = Taxonomy{}
	mi := &file_api_taxonomy_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Taxonomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxonomy) ProtoMessage() {}

func (x *Taxonomy) ProtoReflect() protoreflect.Message {
	mi := &file_api_taxonomy_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxonomy.ProtoReflect.Descriptor instead.
func (*Taxonomy) Descriptor() ([]byte, []int) {
	return file_api_taxonomy_proto_rawDescGZIP(), []int{0}
}

func (x *Taxonomy) GetBrands() []string {
	if x != nil {
		return x.Brands
	}
	return nil
}

func (x *Taxonomy) GetUses() []string {
	if x != nil {
		return x.Uses
	}
	return nil
}

func (x *Taxonomy) GetColors() []string {
	if x != nil {
		return x.Colors
	}
	return nil
}

func (x *Taxonomy) GetDesigns() []string {
	if x != nil {
		return x.Designs
	}
	return nil
}

func (x *Taxonomy) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

var File_api_taxonomy_proto protoreflect.FileDescriptor

const file_api_taxonomy_proto_rawDesc = "" +
	"\n" +
	"\x12api_taxonomy.proto\x12\x0fmagnoliafabrics\"\x88\x01\n" +
	"\bTaxonomy\x12\x16\n" +
	"\x06Brands\x18\x01 \x03(\tR\x06Brands\x12\x12\n" +
	"\x04Uses\x18\x02 \x03(\tR\x04Uses\x12\x16\n" +
	"\x06Colors\x18\x03 \x03(\tR\x06Colors\x12\x18\n" +
	"\aDesigns\x18\x04 \x03(\tR\aDesigns\x12\x1e\n" +
	"\n" +
	"Categories\x18\x05 \x03(\tR\n" +
	"CategoriesB7Z5github.com/Vitality-South/magfabrics-api/pkg/taxonomyb\x06proto3"

var (
	file_api_taxonomy_proto_rawDescOnce sync.Once
	file_api_taxonomy_proto_rawDescData []byte
)

func file_api_taxonomy_proto_rawDescGZIP() []byte {
	file_api_taxonomy_proto_rawDescOnce.Do(func() {
		file_api_taxonomy_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_taxonomy_proto_rawDesc), len(file_api_taxonomy_proto_rawDesc)))
	})
	return file_api_taxonomy_proto_rawDescData
}

var file_api_taxonomy_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_taxonomy_proto_goTypes = []any{
	(*Taxonomy)(nil), // 0: magnoliafabrics.Taxonomy
}
var file_api_taxonomy_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_taxonomy_proto_init() }
func file_api_taxonomy_proto_init() {
	if File_api_taxonomy_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_taxonomy_proto_rawDesc), len(file_api_taxonomy_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_taxonomy_proto_goTypes,
		DependencyIndexes: file_api_taxonomy_proto_depIdxs,
		MessageInfos:      file_api_taxonomy_proto_msgTypes,
	}.Build()
	File_api_taxonomy_proto = out.File
	file_api_taxonomy_proto_goTypes = nil
	file_api_taxonomy_proto_depIdxs = nil
}
