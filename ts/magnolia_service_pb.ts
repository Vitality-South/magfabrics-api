/* eslint-disable */
// @generated by protobuf-ts 2.8.1 with parameter eslint_disable,add_pb_suffix,long_type_number
// @generated from protobuf file "magnolia_service.proto" (package "magnoliafabrics", syntax proto3)
// tslint:disable
//
// Copyright (c) 2022 Vitality South, LLC <chris@vitalitysouth.com>
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CleaningCode } from "./cleaning_code_pb";
import { Taxonomy } from "./api_taxonomy_pb";
import { Inventory } from "./api_inventory_pb";
import { Fabric } from "./api_fabric_pb";
/**
 * @generated from protobuf message magnoliafabrics.GetAllFabricsRequest
 */
export interface GetAllFabricsRequest {
}
/**
 * @generated from protobuf message magnoliafabrics.GetAllFabricsResponse
 */
export interface GetAllFabricsResponse {
    /**
     * @generated from protobuf field: repeated magnoliafabrics.Fabric fabrics = 1;
     */
    fabrics: Fabric[];
}
/**
 * @generated from protobuf message magnoliafabrics.GetAllFabricsWithoutInventoryRequest
 */
export interface GetAllFabricsWithoutInventoryRequest {
}
/**
 * @generated from protobuf message magnoliafabrics.GetAllFabricsWithoutInventoryResponse
 */
export interface GetAllFabricsWithoutInventoryResponse {
    /**
     * @generated from protobuf field: repeated magnoliafabrics.Fabric fabrics = 1;
     */
    fabrics: Fabric[];
}
/**
 * @generated from protobuf message magnoliafabrics.GetAllInventoryRequest
 */
export interface GetAllInventoryRequest {
}
/**
 * @generated from protobuf message magnoliafabrics.GetAllInventoryResponse
 */
export interface GetAllInventoryResponse {
    /**
     * @generated from protobuf field: repeated magnoliafabrics.Inventory inventory = 1;
     */
    inventory: Inventory[];
}
/**
 * @generated from protobuf message magnoliafabrics.GetFabricByIDRequest
 */
export interface GetFabricByIDRequest {
    /**
     * @generated from protobuf field: string fabric_id = 1;
     */
    fabricId: string;
}
/**
 * @generated from protobuf message magnoliafabrics.GetFabricByIDResponse
 */
export interface GetFabricByIDResponse {
    /**
     * @generated from protobuf field: magnoliafabrics.Fabric fabric = 1;
     */
    fabric?: Fabric;
}
/**
 * @generated from protobuf message magnoliafabrics.GetFabricByNameRequest
 */
export interface GetFabricByNameRequest {
    /**
     * @generated from protobuf field: string fabric_name = 1;
     */
    fabricName: string;
}
/**
 * @generated from protobuf message magnoliafabrics.GetFabricByNameResponse
 */
export interface GetFabricByNameResponse {
    /**
     * @generated from protobuf field: magnoliafabrics.Fabric fabric = 1;
     */
    fabric?: Fabric;
}
/**
 * @generated from protobuf message magnoliafabrics.GetAllFabricTaxonomyRequest
 */
export interface GetAllFabricTaxonomyRequest {
}
/**
 * @generated from protobuf message magnoliafabrics.GetAllFabricTaxonomyResponse
 */
export interface GetAllFabricTaxonomyResponse {
    /**
     * @generated from protobuf field: magnoliafabrics.Taxonomy taxonomy = 1;
     */
    taxonomy?: Taxonomy;
}
/**
 * @generated from protobuf message magnoliafabrics.GetCleaningCodesRequest
 */
export interface GetCleaningCodesRequest {
}
/**
 * @generated from protobuf message magnoliafabrics.GetCleaningCodesResponse
 */
export interface GetCleaningCodesResponse {
    /**
     * @generated from protobuf field: map<string, magnoliafabrics.CleaningCode> cleaning_codes = 1;
     */
    cleaningCodes: {
        [key: string]: CleaningCode;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAllFabricsRequest$Type extends MessageType<GetAllFabricsRequest> {
    constructor() {
        super("magnoliafabrics.GetAllFabricsRequest", []);
    }
    create(value?: PartialMessage<GetAllFabricsRequest>): GetAllFabricsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllFabricsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllFabricsRequest): GetAllFabricsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllFabricsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetAllFabricsRequest
 */
export const GetAllFabricsRequest = new GetAllFabricsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllFabricsResponse$Type extends MessageType<GetAllFabricsResponse> {
    constructor() {
        super("magnoliafabrics.GetAllFabricsResponse", [
            { no: 1, name: "fabrics", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Fabric }
        ]);
    }
    create(value?: PartialMessage<GetAllFabricsResponse>): GetAllFabricsResponse {
        const message = { fabrics: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllFabricsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllFabricsResponse): GetAllFabricsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated magnoliafabrics.Fabric fabrics */ 1:
                    message.fabrics.push(Fabric.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllFabricsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated magnoliafabrics.Fabric fabrics = 1; */
        for (let i = 0; i < message.fabrics.length; i++)
            Fabric.internalBinaryWrite(message.fabrics[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetAllFabricsResponse
 */
export const GetAllFabricsResponse = new GetAllFabricsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllFabricsWithoutInventoryRequest$Type extends MessageType<GetAllFabricsWithoutInventoryRequest> {
    constructor() {
        super("magnoliafabrics.GetAllFabricsWithoutInventoryRequest", []);
    }
    create(value?: PartialMessage<GetAllFabricsWithoutInventoryRequest>): GetAllFabricsWithoutInventoryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllFabricsWithoutInventoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllFabricsWithoutInventoryRequest): GetAllFabricsWithoutInventoryRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllFabricsWithoutInventoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetAllFabricsWithoutInventoryRequest
 */
export const GetAllFabricsWithoutInventoryRequest = new GetAllFabricsWithoutInventoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllFabricsWithoutInventoryResponse$Type extends MessageType<GetAllFabricsWithoutInventoryResponse> {
    constructor() {
        super("magnoliafabrics.GetAllFabricsWithoutInventoryResponse", [
            { no: 1, name: "fabrics", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Fabric }
        ]);
    }
    create(value?: PartialMessage<GetAllFabricsWithoutInventoryResponse>): GetAllFabricsWithoutInventoryResponse {
        const message = { fabrics: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllFabricsWithoutInventoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllFabricsWithoutInventoryResponse): GetAllFabricsWithoutInventoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated magnoliafabrics.Fabric fabrics */ 1:
                    message.fabrics.push(Fabric.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllFabricsWithoutInventoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated magnoliafabrics.Fabric fabrics = 1; */
        for (let i = 0; i < message.fabrics.length; i++)
            Fabric.internalBinaryWrite(message.fabrics[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetAllFabricsWithoutInventoryResponse
 */
export const GetAllFabricsWithoutInventoryResponse = new GetAllFabricsWithoutInventoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllInventoryRequest$Type extends MessageType<GetAllInventoryRequest> {
    constructor() {
        super("magnoliafabrics.GetAllInventoryRequest", []);
    }
    create(value?: PartialMessage<GetAllInventoryRequest>): GetAllInventoryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllInventoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllInventoryRequest): GetAllInventoryRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllInventoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetAllInventoryRequest
 */
export const GetAllInventoryRequest = new GetAllInventoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllInventoryResponse$Type extends MessageType<GetAllInventoryResponse> {
    constructor() {
        super("magnoliafabrics.GetAllInventoryResponse", [
            { no: 1, name: "inventory", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Inventory }
        ]);
    }
    create(value?: PartialMessage<GetAllInventoryResponse>): GetAllInventoryResponse {
        const message = { inventory: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllInventoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllInventoryResponse): GetAllInventoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated magnoliafabrics.Inventory inventory */ 1:
                    message.inventory.push(Inventory.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllInventoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated magnoliafabrics.Inventory inventory = 1; */
        for (let i = 0; i < message.inventory.length; i++)
            Inventory.internalBinaryWrite(message.inventory[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetAllInventoryResponse
 */
export const GetAllInventoryResponse = new GetAllInventoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFabricByIDRequest$Type extends MessageType<GetFabricByIDRequest> {
    constructor() {
        super("magnoliafabrics.GetFabricByIDRequest", [
            { no: 1, name: "fabric_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetFabricByIDRequest>): GetFabricByIDRequest {
        const message = { fabricId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetFabricByIDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFabricByIDRequest): GetFabricByIDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fabric_id */ 1:
                    message.fabricId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFabricByIDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fabric_id = 1; */
        if (message.fabricId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fabricId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetFabricByIDRequest
 */
export const GetFabricByIDRequest = new GetFabricByIDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFabricByIDResponse$Type extends MessageType<GetFabricByIDResponse> {
    constructor() {
        super("magnoliafabrics.GetFabricByIDResponse", [
            { no: 1, name: "fabric", kind: "message", T: () => Fabric }
        ]);
    }
    create(value?: PartialMessage<GetFabricByIDResponse>): GetFabricByIDResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetFabricByIDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFabricByIDResponse): GetFabricByIDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* magnoliafabrics.Fabric fabric */ 1:
                    message.fabric = Fabric.internalBinaryRead(reader, reader.uint32(), options, message.fabric);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFabricByIDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* magnoliafabrics.Fabric fabric = 1; */
        if (message.fabric)
            Fabric.internalBinaryWrite(message.fabric, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetFabricByIDResponse
 */
export const GetFabricByIDResponse = new GetFabricByIDResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFabricByNameRequest$Type extends MessageType<GetFabricByNameRequest> {
    constructor() {
        super("magnoliafabrics.GetFabricByNameRequest", [
            { no: 1, name: "fabric_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetFabricByNameRequest>): GetFabricByNameRequest {
        const message = { fabricName: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetFabricByNameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFabricByNameRequest): GetFabricByNameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fabric_name */ 1:
                    message.fabricName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFabricByNameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fabric_name = 1; */
        if (message.fabricName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fabricName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetFabricByNameRequest
 */
export const GetFabricByNameRequest = new GetFabricByNameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFabricByNameResponse$Type extends MessageType<GetFabricByNameResponse> {
    constructor() {
        super("magnoliafabrics.GetFabricByNameResponse", [
            { no: 1, name: "fabric", kind: "message", T: () => Fabric }
        ]);
    }
    create(value?: PartialMessage<GetFabricByNameResponse>): GetFabricByNameResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetFabricByNameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFabricByNameResponse): GetFabricByNameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* magnoliafabrics.Fabric fabric */ 1:
                    message.fabric = Fabric.internalBinaryRead(reader, reader.uint32(), options, message.fabric);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFabricByNameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* magnoliafabrics.Fabric fabric = 1; */
        if (message.fabric)
            Fabric.internalBinaryWrite(message.fabric, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetFabricByNameResponse
 */
export const GetFabricByNameResponse = new GetFabricByNameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllFabricTaxonomyRequest$Type extends MessageType<GetAllFabricTaxonomyRequest> {
    constructor() {
        super("magnoliafabrics.GetAllFabricTaxonomyRequest", []);
    }
    create(value?: PartialMessage<GetAllFabricTaxonomyRequest>): GetAllFabricTaxonomyRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllFabricTaxonomyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllFabricTaxonomyRequest): GetAllFabricTaxonomyRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllFabricTaxonomyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetAllFabricTaxonomyRequest
 */
export const GetAllFabricTaxonomyRequest = new GetAllFabricTaxonomyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllFabricTaxonomyResponse$Type extends MessageType<GetAllFabricTaxonomyResponse> {
    constructor() {
        super("magnoliafabrics.GetAllFabricTaxonomyResponse", [
            { no: 1, name: "taxonomy", kind: "message", T: () => Taxonomy }
        ]);
    }
    create(value?: PartialMessage<GetAllFabricTaxonomyResponse>): GetAllFabricTaxonomyResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllFabricTaxonomyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllFabricTaxonomyResponse): GetAllFabricTaxonomyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* magnoliafabrics.Taxonomy taxonomy */ 1:
                    message.taxonomy = Taxonomy.internalBinaryRead(reader, reader.uint32(), options, message.taxonomy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllFabricTaxonomyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* magnoliafabrics.Taxonomy taxonomy = 1; */
        if (message.taxonomy)
            Taxonomy.internalBinaryWrite(message.taxonomy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetAllFabricTaxonomyResponse
 */
export const GetAllFabricTaxonomyResponse = new GetAllFabricTaxonomyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCleaningCodesRequest$Type extends MessageType<GetCleaningCodesRequest> {
    constructor() {
        super("magnoliafabrics.GetCleaningCodesRequest", []);
    }
    create(value?: PartialMessage<GetCleaningCodesRequest>): GetCleaningCodesRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCleaningCodesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCleaningCodesRequest): GetCleaningCodesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetCleaningCodesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetCleaningCodesRequest
 */
export const GetCleaningCodesRequest = new GetCleaningCodesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCleaningCodesResponse$Type extends MessageType<GetCleaningCodesResponse> {
    constructor() {
        super("magnoliafabrics.GetCleaningCodesResponse", [
            { no: 1, name: "cleaning_codes", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => CleaningCode } }
        ]);
    }
    create(value?: PartialMessage<GetCleaningCodesResponse>): GetCleaningCodesResponse {
        const message = { cleaningCodes: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCleaningCodesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCleaningCodesResponse): GetCleaningCodesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, magnoliafabrics.CleaningCode> cleaning_codes */ 1:
                    this.binaryReadMap1(message.cleaningCodes, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: GetCleaningCodesResponse["cleaningCodes"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetCleaningCodesResponse["cleaningCodes"] | undefined, val: GetCleaningCodesResponse["cleaningCodes"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = CleaningCode.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field magnoliafabrics.GetCleaningCodesResponse.cleaning_codes");
            }
        }
        map[key ?? ""] = val ?? CleaningCode.create();
    }
    internalBinaryWrite(message: GetCleaningCodesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, magnoliafabrics.CleaningCode> cleaning_codes = 1; */
        for (let k of Object.keys(message.cleaningCodes)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            CleaningCode.internalBinaryWrite(message.cleaningCodes[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.GetCleaningCodesResponse
 */
export const GetCleaningCodesResponse = new GetCleaningCodesResponse$Type();
/**
 * @generated ServiceType for protobuf service magnoliafabrics.MagnoliaFabricsService
 */
export const MagnoliaFabricsService = new ServiceType("magnoliafabrics.MagnoliaFabricsService", [
    { name: "GetAllFabrics", options: {}, I: GetAllFabricsRequest, O: GetAllFabricsResponse },
    { name: "GetAllFabricsWithoutInventory", options: {}, I: GetAllFabricsWithoutInventoryRequest, O: GetAllFabricsWithoutInventoryResponse },
    { name: "GetAllInventory", options: {}, I: GetAllInventoryRequest, O: GetAllInventoryResponse },
    { name: "GetFabricByID", options: {}, I: GetFabricByIDRequest, O: GetFabricByIDResponse },
    { name: "GetFabricByName", options: {}, I: GetFabricByNameRequest, O: GetFabricByNameResponse },
    { name: "GetAllFabricTaxonomy", options: {}, I: GetAllFabricTaxonomyRequest, O: GetAllFabricTaxonomyResponse },
    { name: "GetCleaningCodes", options: {}, I: GetCleaningCodesRequest, O: GetCleaningCodesResponse }
]);
