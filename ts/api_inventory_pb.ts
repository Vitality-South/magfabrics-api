/* eslint-disable */
// @generated by protobuf-ts 2.11.1 with parameter eslint_disable,add_pb_suffix,long_type_number
// @generated from protobuf file "api_inventory.proto" (package "magnoliafabrics", syntax proto3)
// tslint:disable
//
// Copyright (c) 2022 Vitality South, LLC <chris@vitalitysouth.com>
// All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message magnoliafabrics.Inventory
 */
export interface Inventory {
    /**
     * @gotags: dynamo:"FabricProductCode"
     *
     * @generated from protobuf field: string ProductCode = 1
     */
    productCode: string;
    /**
     * @gotags: dynamo:"InventoryRolls"
     *
     * @generated from protobuf field: repeated magnoliafabrics.Inventory.Roll Rolls = 2
     */
    rolls: Inventory_Roll[];
    /**
     * @gotags: dynamo:"InventoryTotal"
     *
     * @generated from protobuf field: string Total = 3
     */
    total: string;
    /**
     * @gotags: dynamo:"InventoryPO"
     *
     * @generated from protobuf field: repeated magnoliafabrics.Inventory.PO PurchaseOrders = 4
     */
    purchaseOrders: Inventory_PO[];
    /**
     * @gotags: dynamo:"InventoryTotalOnPO"
     *
     * @generated from protobuf field: string TotalOnPO = 5
     */
    totalOnPO: string;
    /**
     * @gotags: dynamo:"InventoryOnBackorder"
     *
     * @generated from protobuf field: string OnBackorder = 6
     */
    onBackorder: string;
}
/**
 * @generated from protobuf message magnoliafabrics.Inventory.Roll
 */
export interface Inventory_Roll {
    /**
     * @gotags: dynamo:"InventoryRollID"
     *
     * @generated from protobuf field: string ID = 1
     */
    iD: string;
    /**
     * @gotags: dynamo:"InventoryRollQuantity"
     *
     * @generated from protobuf field: string Quantity = 2
     */
    quantity: string;
}
/**
 * @generated from protobuf message magnoliafabrics.Inventory.PO
 */
export interface Inventory_PO {
    /**
     * @gotags: dynamo:"InventoryPOETA"
     *
     * @generated from protobuf field: string ETA = 1
     */
    eTA: string;
    /**
     * @gotags: dynamo:"InventoryPOAmount"
     *
     * @generated from protobuf field: string Amount = 2
     */
    amount: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Inventory$Type extends MessageType<Inventory> {
    constructor() {
        super("magnoliafabrics.Inventory", [
            { no: 1, name: "ProductCode", kind: "scalar", jsonName: "ProductCode", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Rolls", kind: "message", jsonName: "Rolls", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Inventory_Roll },
            { no: 3, name: "Total", kind: "scalar", jsonName: "Total", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "PurchaseOrders", kind: "message", jsonName: "PurchaseOrders", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Inventory_PO },
            { no: 5, name: "TotalOnPO", kind: "scalar", jsonName: "TotalOnPO", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "OnBackorder", kind: "scalar", jsonName: "OnBackorder", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Inventory>): Inventory {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.productCode = "";
        message.rolls = [];
        message.total = "";
        message.purchaseOrders = [];
        message.totalOnPO = "";
        message.onBackorder = "";
        if (value !== undefined)
            reflectionMergePartial<Inventory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Inventory): Inventory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ProductCode */ 1:
                    message.productCode = reader.string();
                    break;
                case /* repeated magnoliafabrics.Inventory.Roll Rolls */ 2:
                    message.rolls.push(Inventory_Roll.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string Total */ 3:
                    message.total = reader.string();
                    break;
                case /* repeated magnoliafabrics.Inventory.PO PurchaseOrders */ 4:
                    message.purchaseOrders.push(Inventory_PO.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string TotalOnPO */ 5:
                    message.totalOnPO = reader.string();
                    break;
                case /* string OnBackorder */ 6:
                    message.onBackorder = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Inventory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ProductCode = 1; */
        if (message.productCode !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.productCode);
        /* repeated magnoliafabrics.Inventory.Roll Rolls = 2; */
        for (let i = 0; i < message.rolls.length; i++)
            Inventory_Roll.internalBinaryWrite(message.rolls[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string Total = 3; */
        if (message.total !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.total);
        /* repeated magnoliafabrics.Inventory.PO PurchaseOrders = 4; */
        for (let i = 0; i < message.purchaseOrders.length; i++)
            Inventory_PO.internalBinaryWrite(message.purchaseOrders[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string TotalOnPO = 5; */
        if (message.totalOnPO !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.totalOnPO);
        /* string OnBackorder = 6; */
        if (message.onBackorder !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.onBackorder);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.Inventory
 */
export const Inventory = new Inventory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Inventory_Roll$Type extends MessageType<Inventory_Roll> {
    constructor() {
        super("magnoliafabrics.Inventory.Roll", [
            { no: 1, name: "ID", kind: "scalar", jsonName: "ID", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Quantity", kind: "scalar", jsonName: "Quantity", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Inventory_Roll>): Inventory_Roll {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iD = "";
        message.quantity = "";
        if (value !== undefined)
            reflectionMergePartial<Inventory_Roll>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Inventory_Roll): Inventory_Roll {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ID */ 1:
                    message.iD = reader.string();
                    break;
                case /* string Quantity */ 2:
                    message.quantity = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Inventory_Roll, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ID = 1; */
        if (message.iD !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iD);
        /* string Quantity = 2; */
        if (message.quantity !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.Inventory.Roll
 */
export const Inventory_Roll = new Inventory_Roll$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Inventory_PO$Type extends MessageType<Inventory_PO> {
    constructor() {
        super("magnoliafabrics.Inventory.PO", [
            { no: 1, name: "ETA", kind: "scalar", jsonName: "ETA", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Amount", kind: "scalar", jsonName: "Amount", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Inventory_PO>): Inventory_PO {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.eTA = "";
        message.amount = "";
        if (value !== undefined)
            reflectionMergePartial<Inventory_PO>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Inventory_PO): Inventory_PO {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ETA */ 1:
                    message.eTA = reader.string();
                    break;
                case /* string Amount */ 2:
                    message.amount = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Inventory_PO, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ETA = 1; */
        if (message.eTA !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.eTA);
        /* string Amount = 2; */
        if (message.amount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.amount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message magnoliafabrics.Inventory.PO
 */
export const Inventory_PO = new Inventory_PO$Type();
